@inject CovidTrackingClient CTClient
@using ChartJs.Blazor.ChartJS.LineChart

<div class="form-group">
    <label>Country:</label>
    <select class="form-control" @bind="Country">
        @foreach (var country in _countries)
        {
            <option value="@country">@country</option>
        }
    </select>
</div>


<ChartJsLineChart Config="@_lineConfig" Width="600" Height="300" />


@code{ 

    private LineConfig _lineConfig = new LineConfig
    {
        Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "COVID 19 Timeline by country"
            },
            Legend = new Legend
            {
                Position = ChartJs.Blazor.ChartJS.Common.Enums.Position.Top,
                Labels = new LegendLabelConfiguration
                {
                    UsePointStyle = true
                }
            },
            Tooltips = new Tooltips
            {
                Mode = InteractionMode.Nearest,
                Intersect = false
            },
            Scales = new Scales
            {
                xAxes = new List<CartesianAxis>
            {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "MM/DD/YYYY"
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Day"
                            }
                        }
                    }
            },
            Hover = new LineOptionsHover
            {
                Intersect = true,
                Mode = InteractionMode.Y
            }
        }
    };

    private string country;
    private string Country
    {
        get { return country; }
        set
        {
            country = value;
            UpdateDataSets();
        }
    }
     
    private Dictionary<string, IEnumerable<TimeLine>> ConfirmedTimeline = new Dictionary<string, IEnumerable<TimeLine>>();
    private Dictionary<string, IEnumerable<TimeLine>> DeathsTimeline = new Dictionary<string, IEnumerable<TimeLine>>();

    private IEnumerable<string> _countries = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var confirmed = await CTClient.GetWorldConfirmedTimeline();
        var deaths = await CTClient.GetWorldDeathsTimeline();

        var globalData = await CTClient.GetWorldTimeline();

        ConfirmedTimeline = confirmed
            .GroupBy(c => c.Country)
            .ToDictionary(c => c.Key, c => c.SelectMany(c => c.TimeSeries).GroupBy(t => t.Date).Select(t => new TimeLine { Date = t.Key, Value = t.Sum(v => v.Value) }));
        DeathsTimeline = deaths
            .GroupBy(c => c.Country)
            .ToDictionary(c => c.Key, c => c.SelectMany(c => c.TimeSeries).GroupBy(t => t.Date).Select(t => new TimeLine { Date = t.Key, Value = t.Sum(v => v.Value) }));

        _countries = new[] { "All" }.Union(ConfirmedTimeline.Keys.Union(DeathsTimeline.Keys).Distinct()).ToArray();

        ConfirmedTimeline.Add("All" , globalData.Select(g => new TimeLine { Date = g.Date.ToString("MM/dd/yyyy"), Value = g.Confirmed }));
        DeathsTimeline.Add("All" , globalData.Select(g => new TimeLine { Date = g.Date.ToString("MM/dd/yyyy"), Value = g.Deaths }));

        Country = _countries.FirstOrDefault();
    }


    private void UpdateDataSets()
    {
        _lineConfig.Data.Datasets.Clear();

        if (string.IsNullOrEmpty(Country))
        {
            return;
        }

        var confirmed = ConfirmedTimeline[Country];
        var deaths = DeathsTimeline[Country];

        var deathDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.ColorString(System.Drawing.Color.Red.R, System.Drawing.Color.Red.G, System.Drawing.Color.Red.B, 0.5),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(50, System.Drawing.Color.Red)),
            Label = $"Deaths",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        deathDataSet.AddRange(deaths.Select(p => new TimeTuple<float>(new Moment(p.When), p.Value)));
        _lineConfig.Data.Datasets.Add(deathDataSet);

        var positiveDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(50, System.Drawing.Color.LightBlue)),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(50, System.Drawing.Color.LightBlue)),
            Label = $"Confirmed",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        positiveDataSet.AddRange(confirmed.Select(p => new TimeTuple<float>(new Moment(p.When), p.Value)));
        _lineConfig.Data.Datasets.Add(positiveDataSet);
    }
}
