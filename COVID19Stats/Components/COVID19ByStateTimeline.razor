@inject CovidTrackingClient CTClient
@using ChartJs.Blazor.ChartJS.LineChart

<div class="form-group">
    <label>State:</label>
    <select class="form-control" @bind="SelectedState">
        @foreach (var state in CTTimeline.Keys)
        {
            <option value="@state">@StateHelper.GetState(state)</option>
        }
    </select>
</div>


<ChartJsLineChart Config="@_lineConfig" Width="600" Height="300" />

@code{

    private LineConfig _lineConfig = new LineConfig
    {
        Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "COVID 19 Timeline by states"
            },
            Legend = new Legend
            {
                Position = ChartJs.Blazor.ChartJS.Common.Enums.Position.Top,
                Labels = new LegendLabelConfiguration
                {
                    UsePointStyle = true
                }
            },
            Tooltips = new Tooltips
            {
                Mode = InteractionMode.Nearest,
                Intersect = false
            },
            Scales = new Scales
            {
                xAxes = new List<CartesianAxis>
                {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "MM/DD/YYYY"
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Day"
                            }
                        }
                    }
            },
            Hover = new LineOptionsHover
            {
                Intersect = true,
                Mode = InteractionMode.Y
            }
        }
    };

    private string selectedState;
    private string SelectedState
    {
        get { return selectedState; }
        set
        {
            selectedState = value;
            UpdateDataSets(CTTimeline[value]);
        }
    }

    private Dictionary<string, IEnumerable<CovidTrackingTimeline>> CTTimeline = new Dictionary<string, IEnumerable<CovidTrackingTimeline>>();

    protected override async Task OnInitializedAsync()
    {
        CTTimeline = await CTClient.GetStatesTimeline();

        SelectedState = CTTimeline.First().Key;
        var timeline = CTTimeline[SelectedState];

        UpdateDataSets(timeline);
    }


    private void UpdateDataSets(IEnumerable<CovidTrackingTimeline> timeline)
    {
        _lineConfig.Data.Datasets.Clear();

        var positiveDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
            Label = $"Positive",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        positiveDataSet.AddRange(timeline.Select(p => new TimeTuple<float>(new Moment(p.DateChecked), p.Positive ?? 0.0f)));
        _lineConfig.Data.Datasets.Add(positiveDataSet);

        var negativeDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
            Label = $"Negative",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        negativeDataSet.AddRange(timeline.Select(p => new TimeTuple<float>(new Moment(p.DateChecked), p.Negative ?? 0f)));
        _lineConfig.Data.Datasets.Add(negativeDataSet);

        var deathDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = $"Died",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        deathDataSet.AddRange(timeline.Select(p => new TimeTuple<float>(new Moment(p.DateChecked), p.Death ?? 0f)));
        _lineConfig.Data.Datasets.Add(deathDataSet);

        var hospitilizedDataSet = new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Pink),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Pink),
            Label = $"Hospitilized",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        hospitilizedDataSet.AddRange(timeline.Select(p => new TimeTuple<float>(new Moment(p.DateChecked), p.Hospitalized ?? 0f)));
        _lineConfig.Data.Datasets.Add(hospitilizedDataSet);
    }
}
